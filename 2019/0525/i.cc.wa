#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int maxh=27;
const int maxn=1000005;
int n,m;
int a[maxn];
int fa[maxn];
int dep[maxn];
int par[maxh + 5][maxn];
int root;
struct edget
{
	int v,w;
};
vector<edget> G[maxn];
void addedge(int u,int v,int w)
{
	G[u].push_back(edget{v,w});
}
void dfs(int v,int p,int d)
{
	par[0][v]=p;
	dep[v]=d;
	for (auto x:G[v])
	if (x.v!=p) dfs(x.v,v,d+1);
}
void init(int V)
{
	dfs(root,-1,0);
	for (int k=0;k + 1<maxh;k++)
		for (int v=0;v<V;v++)
		{
			if (par[k][v]<0) par[k+1][v]=-1;
			else par[k+1][v]=par[k][par[k][v]];
		}
}
int lca(int u,int v)
{
	if (dep[u]>dep[v]) swap(u,v);
	for (int k=0;k<maxh;k++)
		if ((dep[v]-dep[u])>>k&1) v=par[k][v];
	if (u==v) return u;
	for (int k=maxh - 1;k>=0;k--)
		if (par[k][u]!=par[k][v])
		{
			u=par[k][u];
			v=par[k][v];
		}
	return par[0][u];
}
vector<int> pred;
vector<int> xm[maxn];
void pre(int p)
{
	pred.push_back(p);
	for (auto x:G[p]) pre(x.v);
}
int main()
{
	//ios::sync_with_stdio(0);cin.tie(0);
	//cin>>n>>m;
	scanf("%d%d", &n, &m);
	for (int i=0;i<n;i++) //cin>>a[i];
		scanf("%d", a + i);
	int rt=-1;
	for (int i=0;i<n;i++) 
	{
		//cin>>fa[i];
		scanf("%d", fa + i);
		if (--fa[i]!=-1) addedge(fa[i],i,1);else rt=i;
	}
	root=rt;
	init(n);
	//pred.clear();
	pre(rt);
	for (int i=1;i<=m;i++) xm[i].push_back(rt);
	for (auto x:pred)
	{
		xm[a[x]].push_back(x);
	}
	for (int i=1;i<=m;i++)
	{
		if (xm[i].size() == 1)
		{
			//cout << 0 << " \n"[i == m];
			putchar('0');
			putchar(i == m ? '\n' : ' ');
			continue;
		}
		int ans=0, tmp;
		while (xm[i].size()>=2)
		{
			int k1,k2;
			k1=xm[i][xm[i].size()-1];
			k2=xm[i][xm[i].size()-2];
			xm[i].pop_back();xm[i].pop_back();
			if (k1 >= k2)
			{
				int kk=lca(k1,k2);
				ans+=(dep[k1]-dep[kk]+dep[k2]-dep[kk]);
				xm[i].push_back(kk);
				//cout << k1 << ' ' << k2 << ' ' << kk << endl;
			}
			else // k1 == 1
			{
				int kk = lca(tmp, k2);
				ans+=(dep[k2] - dep[kk]);
				xm[i].push_back(k1);
				//cout << tmp << ' ' << k2 << ' ' << kk << endl;
			}
			tmp = k2;
		}
		ans+=1;
		//cout << ans;
		printf("%d", ans);
		putchar(i == m ? '\n' : ' ');
	}
	return 0;
}
